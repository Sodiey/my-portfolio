$color-white: #fff;
$primary-color: #444;
$secondary-color: #eece1a;

$themes: (
  light: (
    primary-color: darken($color-white, 5),
    secondary-color: darken($secondary-color, 16),
    btn-color: $color-white,
    color-beta: black,
    accent-color: $primary-color,
  ),
  dark: (
    primary-color: $primary-color,
    secondary-color: $secondary-color,
    btn-color: #000,
    color-beta: $color-white,
    accent-color: lighten($secondary-color, 50),
  ),
);

$show-home-image: true;
$home-image: url(../img/background.jpg);
$background-opacity: 0.9;

@mixin easeOut {
  transition: all 0.5s ease-out;
}
@mixin hoverOver {
  &:hover {
    color: $secondary-color;
  }
}

@mixin background {
  @include easeOut;
  @if $show-home-image {
    &#bg-image {
      background-image: $home-image;
      background-attachment: fixed;
      background-size: cover;
    }
  }
}
// Set Text Color
@function set-text-color($color) {
  @if (lightness($color) > 40) {
    @return #000;
  } @else {
    @return #fff;
  }
}

//MEdia Query Mixins

@mixin mediaSm {
  @media screen and (max-width: 500px) {
    @content;
  }
}

@mixin mediaMd {
  @media screen and (max-width: 768px) {
    @content;
  }
}

@mixin mediaLg {
  @media screen and (min-width: 769px) and (max-width: 1170px) {
    @content;
  }
}

@mixin mediaXl {
  @media screen and (min-width: 1171px) {
    @content;
  }
}

// Theming
@function map-fetch($map, $keys) {
  $key: nth($keys, 1);
  $length: length($keys);
  $value: map-get($map, $key);

  @if $value != null {
    @if $length > 1 {
      $rest: ();

      @for $i from 2 through $length {
        $rest: append($rest, nth($keys, $i));
      }

      @return map-fetch($value, $rest);
    } @else {
      @return $value;
    }
  } @else {
    @return false;
  }
}

@function getThemifyVariable($key) {
  @return map-get($theme-map, $key);
}

@mixin themify($themes: $themes) {
  @each $theme, $map in $themes {
    .#{$theme} & {
      // Define theme color
      $theme-map: (
        primary-color: #444,
      ) !global;

      @each $key, $submap in $map {
        $value: map-fetch($themes, $theme '#{$key}');
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }

      @content;
      @include easeOut;

      // reset theme color to null
      $theme-map: null !global;
    }
  }
}
